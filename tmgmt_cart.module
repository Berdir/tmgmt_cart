<?php

/**
 * @file
 * Module file for the tmgmt_cart.module.
 */

include_once 'tmgmt_cart.blocks.inc';

/**
 * Implements hook_form_alter().
 */
function tmgmt_cart_form_alter(&$form, &$form_state, $form_id) {

  // Is there a way to use TMGMTSourceUIControllerInterface::overviewForm()
  // to alter this form? the regex below was just for testing purposes, there
  // is surely a better way!

  // Any form with 'tmgmt' and 'source' in the form_id.
  if (preg_match('/^.*?(?:\b|_)tmgmt(?:\b|_).*?(?:\b|_)source(?:\b|_).*?$/m', $form_id)) {

    // Add an 'add to cart' button with a submit handler.
    $form['actions']['tmgmt_cart_add'] = array(
      '#type' => 'submit',
      '#value' => t('Add to cart'),
      '#submit' => array('_tmgmt_cart_add_items_from_source'),
    );

  }

}

/**
 * Submit handler declared in tmgmt_cart_form_alter().
 */
function _tmgmt_cart_add_items_from_source($form, &$form_state) {

  if (array_key_exists('views_bulk_operations', $form_state['values'])) {
    $items = array_filter($form_state['values']['views_bulk_operations']);
    $type = 'node';
  }
  else {
    $items = array_filter($form_state['values']['items']);
    $type = $form_state['item_type'];
  }

  $tmgmt_cart = TMGMTCart::getInstance();
  $tmgmt_cart->addItems($type, $items);

}

/**
 * Form constructor for cart form.
 *
 * @param array $form
 * @param array $form_state
 * @param array $items
 *  - job items from TMGMTCart->getItems()
 *
 * @return array $form
 */
function tmgmt_cart_cart_form($form, &$form_state, $items) {

  $form['items_set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Items'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  if (count($items) === 0) {
    $form['items_set']['none'] = array(
      '#markup' => '<span>' . t('There are no items in your cart.') . '</span>',
    );
  }
  else {
    $form['items_set']['items'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Items'),
      '#description' => t('Upon checkout, these items will be batched into a single job.'),
      '#options' => $items,
    );
  }

  if (count($items) !== 0) {
    $form['items_set']['checkout'] = array(
      '#type' => 'submit',
      '#value' => t('Checkout'),
      '#attributes' => array(
        'class' => array(
          'btn',
          'btn-primary',
        ),
      ),
      '#submit' => array('_tmgmt_cart_cart_form_submit_checkout'),
    );

    $form['items_set']['update'] = array(
      '#type' => 'submit',
      '#value' => t('Remove selected'),
      '#attributes' => array(
        'class' => array(
          'btn',
          'btn-primary',
        ),
      ),
      '#submit' => array('_tmgmt_cart_cart_form_submit_remove'),
    );

    $form['items_set']['empty'] = array(
      '#type' => 'submit',
      '#value' => t('Empty cart'),
      '#attributes' => array(
        'class' => array(
          'btn',
          'btn-primary',
        ),
      ),
      '#submit' => array('_tmgmt_cart_cart_form_submit_empty'),
    );

  }

  return $form;

}

/**
 * Custom form submit callback for tmgmt_cart_cart_form().
 */
function _tmgmt_cart_cart_form_submit_remove($form, &$form_state) {
  $cart = TMGMTCart::getInstance();
  $items = array_filter($form_state['values']['items']);
  $cart->removeItems($items);
}

/**
 * Custom form submit callback for tmgmt_cart_cart_form().
 */
function _tmgmt_cart_cart_form_submit_empty($form, &$form_state) {
  $cart = TMGMTCart::getInstance();
  $cart->emptyCart();
}

/**
 * Custom form submit callback for tmgmt_cart_cart_form().
 */
function _tmgmt_cart_cart_form_submit_checkout($form, &$form_state) {
  $cart = TMGMTCart::getInstance();
  $cart->checkout();
}
